qls.sh   ‚Äî  ‰∏ÄÈîÆÊâßË°åÂÖ≠‰∏™ SQL ËÑöÊú¨
# ------------------------------------------------------------
# ‰æùËµñÔºömysql  CLI Â∑≤Âú® PATH ‰∏≠
# ÁéØÂ¢ÉÂèòÈáèÔºàÂèØÂú® .zshrc / .bash_profile ‰∏≠ËÆæÁΩÆÔºå‰πüÂèØ‰∏¥Êó∂ exportÔºâ
#   DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME
# ------------------------------------------------------------

# ËØªÂèñÁéØÂ¢ÉÂèòÈáèÔºåËÆæÁΩÆÈªòËÆ§ÂÄº
DB_HOST="${DB_HOST:-localhost}"
DB_PORT="${DB_PORT:-3306}"
DB_USER="${DB_USER:-root}"
DB_PASSWORD="${DB_PASSWORD:-}"
DB_NAME="${DB_NAME:-portfolioManager}"

# ÈúÄË¶ÅÊåâÈ°∫Â∫èÊâßË°åÁöÑ SQL Êñá‰ª∂
SQL_FILES=(
  "portfoliomanager_com_icon.sql"
  "portfoliomanager_tickers.sql"
  "portfoliomanager_transaction.sql"
  "portfoliomanager_wealth.sql"
  "portfoliomanager_cash.sql"
  "create_watchlist_table.sql"
)

########################################
# ‚¨á 0) Âà†Èô§Áé∞ÊúâÊï∞ÊçÆÂ∫ìÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
########################################
echo "üóëÔ∏è  Dropping existing database: $DB_NAME (if exists)"
mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASSWORD" \
      -e "DROP DATABASE IF EXISTS \`$DB_NAME\`;" \
      2>/dev/null
if [[ $? -ne 0 ]]; then
  echo "‚ö†Ô∏è  Warning: Cannot drop database $DB_NAME (might not exist or permission issue)"
fi

########################################
# ‚¨á 1) Á°Æ‰øùÊï∞ÊçÆÂ∫ìÂ≠òÂú®
########################################
echo "üõ†  Creating fresh database: $DB_NAME"
mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASSWORD" \
      -e "CREATE DATABASE \`$DB_NAME\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" \
      2>/dev/null
if [[ $? -ne 0 ]]; then
  echo "‚ùå  Cannot create database: $DB_NAME"
  exit 1
fi

########################################
# ‚¨á 2) ‰æùÊ¨°ÊâßË°å SQL Êñá‰ª∂
########################################
echo "üîó Connecting to ${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
for file in "${SQL_FILES[@]}"; do
  if [[ -f "$file" ]]; then
    echo "‚ñ∂ Executing $file ..."
    mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASSWORD" \
          "$DB_NAME" < "$file"
    if [[ $? -ne 0 ]]; then
      echo "‚ùå  Error while executing $file ‚Äì script aborted."
      exit 1
    fi
  else
    echo "‚ö†Ô∏è  File $file not found ‚Äì skipped."
  fi
done

echo "‚úÖ  All SQL scripts executed successfully."

