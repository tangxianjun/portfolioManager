doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title Asset Management System
    script(src="https://cdn.jsdelivr.net/npm/chart.js")
    style.
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font-family: 'Arial', sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        height: 100vh;
        display: flex;
        position: relative;
        overflow: hidden;
      }
      .background-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23ffffff" opacity="0.1"/><path d="M0 50 L100 30 M0 70 L100 50 M0 90 L100 70" stroke="%23ffffff" stroke-width="0.5" opacity="0.3"/></svg>');
        background-size: cover;
        opacity: 0.2;
        z-index: -1;
      }
      .decorative-elements {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -1;
      }
      .chart-line {
        position: absolute;
        height: 2px;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
        transform-origin: left center;
      }
      .chart-line-1 {
        top: 20%;
        width: 60%;
        left: 10%;
        animation: moveLine 8s infinite linear;
      }
      .chart-line-2 {
        top: 40%;
        width: 40%;
        left: 30%;
        animation: moveLine 12s infinite linear reverse;
      }
      .chart-line-3 {
        top: 60%;
        width: 50%;
        left: 20%;
        animation: moveLine 10s infinite linear;
      }
      @keyframes moveLine {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100vw); }
      }
      .floating-dot {
        position: absolute;
        width: 6px;
        height: 6px;
        background: rgba(255, 255, 255, 0.6);
        border-radius: 50%;
        animation: float 6s infinite ease-in-out;
      }
      .dot-1 { top: 15%; left: 25%; animation-delay: 0s; }
      .dot-2 { top: 35%; left: 75%; animation-delay: 1s; }
      .dot-3 { top: 55%; left: 45%; animation-delay: 2s; }
      .dot-4 { top: 75%; left: 85%; animation-delay: 3s; }
      @keyframes float {
        0%, 100% { transform: translateY(0px) translateX(0px); }
        25% { transform: translateY(-20px) translateX(10px); }
        50% { transform: translateY(10px) translateX(-15px); }
        75% { transform: translateY(-15px) translateX(5px); }
      }
      .items-panel {
        width: 300px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        height: 100vh;
        box-shadow: 2px 0 20px rgba(0, 0, 0, 0.1);
        padding: 20px;
        overflow-y: auto;
        border-right: 1px solid rgba(0, 0, 0, 0.1);
      }
      .panel-header {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 20px;
        color: #333;
        padding-bottom: 10px;
        border-bottom: 2px solid #eee;
        display: flex;
        align-items: center;
      }
      .panel-header::before {
        content: "💰";
        margin-right: 10px;
        font-size: 20px;
      }
      .items-list {
        list-style: none;
      }
      .gross-assets {
        padding: 15px;
        margin-bottom: 15px;
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        border-radius: 8px;
        font-weight: bold;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #155724;
      }
      .gross-assets-value {
        font-size: 18px;
        margin-top: 5px;
      }
      .item {
        padding: 15px;
        margin-bottom: 10px;
        background: #f8f9fa;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        border-left: 4px solid #007bff;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
      }
      .item:hover {
        background: #e9ecef;
        transform: translateX(5px);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      }
      .item.active {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-left: 4px solid #fff;
      }
      .item.active .item-name {
        color: rgba(255, 255, 255, 0.9);
      }
      .item-symbol {
        font-weight: bold;
        font-size: 16px;
      }
      .item-name {
        font-size: 12px;
        color: #666;
        margin-top: 5px;
      }
      .main-content {
        flex: 1;
        padding: 30px;
        position: relative;
        display: flex;
        flex-direction: column;
      }
      .content-header {
        margin-bottom: 30px;
        text-align: center;
      }
      .content-header h1 {
        color: white;
        font-size: 28px;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        display: inline-block;
      }
      .content-header h1::before {
        content: "📈";
        margin-right: 15px;
      }
      .action-bar {
        position: absolute;
        top: 30px;
        right: 30px;
        z-index: 100;
        display: flex;
        gap: 10px;
        align-items: center;
      }
      .action-button {
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 25px;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }
      .action-button::before {
        content: "";
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
      }
      .action-button:hover::before {
        left: 100%;
      }
      .action-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
      }
      .action-button:active {
        transform: translateY(0);
      }
      .buy-button {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
      }
      .sell-button {
        background: linear-gradient(135deg, #5cdb95 0%, #0a8c47 100%);
      }
      .holding-info {
        background: rgba(255, 255, 255, 0.8);
        padding: 8px 15px;
        border-radius: 20px;
        font-weight: bold;
        color: #333;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }
      .modal {
        display: none;
        position: fixed;
        z-index: 1001;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        justify-content: center;
        align-items: center;
      }
      .modal-content {
        background-color: #fefefe;
        padding: 30px;
        border-radius: 10px;
        width: 90%;
        max-width: 400px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        text-align: center;
        position: relative;
      }
      .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        position: absolute;
        top: 10px;
        right: 15px;
      }
      .close:hover,
      .close:focus {
        color: black;
      }
      .modal-header {
        margin-bottom: 20px;
        font-size: 20px;
        font-weight: bold;
      }
      .quantity-input {
        width: 100%;
        padding: 12px;
        margin: 15px 0;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
        box-sizing: border-box;
      }
      .modal-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
      }
      .modal-button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        flex: 1;
        margin: 0 5px;
      }
      .modal-button.cancel {
        background-color: #f1f1f1;
        color: #333;
      }
      .modal-button.buy {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
        color: white;
      }
      .modal-button.sell {
        background: linear-gradient(135deg, #5cdb95 0%, #0a8c47 100%);
        color: white;
      }
      .chart-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        flex: 1;
        display: flex;
        flex-direction: column;
        border: 1px solid rgba(0, 0, 0, 0.1);
        overflow: auto;
      }
      .chart-header {
        margin-bottom: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .chart-title {
        font-size: 24px;
        color: #333;
        margin-bottom: 5px;
        display: flex;
        align-items: center;
      }
      .chart-title::before {
        content: "📊";
        margin-right: 10px;
      }
      .chart-subtitle {
        color: #666;
        font-size: 14px;
      }
      .chart-wrapper {
        flex: 1;
        position: relative;
      }
      .chart-placeholder {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #999;
        font-size: 18px;
        text-align: center;
        flex-direction: column;
        background: white;
        z-index: 10;
      }
      .chart-placeholder-icon {
        font-size: 64px;
        margin-bottom: 20px;
        opacity: 0.3;
        animation: pulse 2s infinite;
      }
      @keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.1); }
      }
      #assetChart {
        width: 100%;
        height: 100%;
      }
      .chart-options {
        display: flex;
        gap: 10px;
        margin-top: 10px;
      }
      .chart-period-btn {
        padding: 5px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background: white;
        cursor: pointer;
        font-size: 12px;
      }
      .chart-period-btn.active {
        background: #667eea;
        color: white;
        border-color: #667eea;
      }
      .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 15px 20px;
        border-radius: 5px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        z-index: 10000;
        animation: slideIn 0.3s ease;
      }
      .notification.error {
        background: #f44336;
      }
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      @media (max-width: 768px) {
        .items-panel {
          width: 250px;
        }
        .main-content {
          padding: 20px;
        }
        .action-bar {
          top: 20px;
          right: 20px;
        }
        .content-header h1 {
          font-size: 24px;
        }
        .modal-content {
          padding: 20px;
          width: 95%;
        }
        .modal-buttons {
          flex-direction: column;
        }
        .modal-button {
          margin: 5px 0;
        }
      }
      @media (max-width: 480px) {
        body {
          flex-direction: column;
        }
        .items-panel {
          width: 100%;
          height: auto;
          max-height: 200px;
        }
        .main-content {
          padding: 15px;
        }
        .action-bar {
          position: static;
          margin-bottom: 20px;
          justify-content: center;
        }
        .chart-container {
          height: calc(100vh - 250px);
        }
        .item-holding {
          font-size: 12px;
          color: #28a745;
          font-weight: bold;
          margin-top: 3px;
       }
      }
      

  body
    .background-overlay
    .decorative-elements
      .chart-line.chart-line-1
      .chart-line.chart-line-2
      .chart-line.chart-line-3
      .floating-dot.dot-1
      .floating-dot.dot-2
      .floating-dot.dot-3
      .floating-dot.dot-4
    
    .items-panel
      .panel-header All Assets
      ul.items-list#itemsList
    
    .main-content
      .content-header
        h1 Asset Details
      
      .action-bar
        .holding-info#holdingInfo Holding: 0
        button.action-button.buy-button#buyButton BUY
        button.action-button.sell-button#sellButton SELL
      
      .chart-container
        .chart-header
          div
            .chart-title#selectedItemTitle Select an asset
            .chart-subtitle#selectedItemSubtitle Click on an asset from the list to view details
          .chart-options#chartOptions
            button.chart-period-btn.active(data-period="1M") 1M
            button.chart-period-btn(data-period="3M") 3M
            button.chart-period-btn(data-period="6M") 6M
            button.chart-period-btn(data-period="1Y") 1Y
        .chart-wrapper
          .chart-placeholder#chartPlaceholder
            .chart-placeholder-icon 📈
            div Asset details and trend will be displayed here
          canvas#assetChart
    
    #buyModal.modal
      .modal-content
        span.close#closeBuyModal &times;
        .modal-header Buy Asset
        p How many 
          span#buyModalItemSymbol ITEM
          |  would you like to buy?
        input(type="number")#buyQuantityInput.quantity-input(min="1" value="1")
        .modal-buttons
          button.modal-button.cancel#cancelBuy Cancel
          button.modal-button.buy#confirmBuy Confirm Buy
    
    #sellModal.modal
      .modal-content
        span.close#closeSellModal &times;
        .modal-header Sell Asset
        p How many 
          span#sellModalItemSymbol ITEM
          |  would you like to sell?
        p Available: 
          span#availableQuantity 0
        input(type="number")#sellQuantityInput.quantity-input(min="1" value="1")
        .modal-buttons
          button.modal-button.cancel#cancelSell Cancel
          button.modal-button.sell#confirmSell Confirm Sell

    script.
      // 所有可用资产
      const allItems = [
        { symbol: 'AAPL', name: 'Apple Inc.' },
        { symbol: 'ADDYY', name: 'Adidas AG'},
        { symbol: 'AMZN', name: 'Amazon.com Inc.' },
        { symbol: 'GOOGL', name: 'Alphabet Inc.'},
        { symbol: 'META', name: 'Meta Platforms Inc.' },
        { symbol: 'MSFT', name: 'Microsoft Corporation' },
        { symbol: 'NKE', name: ' Nike Inc.' },
        { symbol: 'NVDA', name: 'NVIDIA Corporation' },
        { symbol: 'TSLA', name: 'Tesla Inc.' },
        { symbol: 'WMT', name: 'Walmart Inc.' },
      ];

      // 用户持仓数据 - 初始为空，将从API获取
      let userHoldings = {};

      // 全局变量
      let selectedItem = null;
      let grossAssetsValue = 0;
      let assetChart = null;
      let currentPeriod = '1M';

      // DOM元素
      const itemsList = document.getElementById('itemsList');
      const buyButton = document.getElementById('buyButton');
      const sellButton = document.getElementById('sellButton');
      const holdingInfo = document.getElementById('holdingInfo');
      const selectedItemTitle = document.getElementById('selectedItemTitle');
      const selectedItemSubtitle = document.getElementById('selectedItemSubtitle');
      const chartPlaceholder = document.getElementById('chartPlaceholder');
      const chartOptions = document.getElementById('chartOptions');
      const assetChartCanvas = document.getElementById('assetChart');
      
      // 购买模态框元素
      const buyModal = document.getElementById('buyModal');
      const buyModalItemSymbol = document.getElementById('buyModalItemSymbol');
      const buyQuantityInput = document.getElementById('buyQuantityInput');
      const cancelBuy = document.getElementById('cancelBuy');
      const confirmBuy = document.getElementById('confirmBuy');
      const closeBuyModal = document.getElementById('closeBuyModal');

      // 卖出模态框元素
      const sellModal = document.getElementById('sellModal');
      const sellModalItemSymbol = document.getElementById('sellModalItemSymbol');
      const availableQuantity = document.getElementById('availableQuantity');
      const sellQuantityInput = document.getElementById('sellQuantityInput');
      const cancelSell = document.getElementById('cancelSell');
      const confirmSell = document.getElementById('confirmSell');
      const closeSellModal = document.getElementById('closeSellModal');

      // 事件监听器
      document.addEventListener('DOMContentLoaded', function() {
        // 初始化资产列表
        initializeItemsList();
        
        // 获取用户持仓数据
        fetchUserHoldings();
        
        // 默认选中第一个资产
        if (allItems.length > 0) {
          selectItem(allItems[0]);
        }

        // 购买按钮点击事件
        buyButton.addEventListener('click', function() {
          if (selectedItem) {
            openBuyModal();
          } else {
            showNotification('Please select an asset first.', 'error');
          }
        });

        // 卖出按钮点击事件
        sellButton.addEventListener('click', function() {
          if (!selectedItem) {
            showNotification('Please select an asset first.', 'error');
            return;
          }
          const holding = userHoldings[selectedItem.symbol] || 0;
          if (holding <= 0) {
            showNotification(`You do not hold any ${selectedItem.symbol}.`, 'error');
            return;
          }
          openSellModal();
        });

        // 图表时间周期按钮事件
        chartOptions.querySelectorAll('.chart-period-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            chartOptions.querySelectorAll('.chart-period-btn').forEach(b => {
              b.classList.remove('active');
            });
            this.classList.add('active');
            currentPeriod = this.dataset.period;
            if (selectedItem) {
              fetchHistoricalData(selectedItem.symbol);
            }
          });
        });

        // 购买模态框事件
        cancelBuy.addEventListener('click', closeBuyModalFunc);
        confirmBuy.addEventListener('click', confirmPurchase);
        closeBuyModal.addEventListener('click', closeBuyModalFunc);

        // 卖出模态框事件
        cancelSell.addEventListener('click', closeSellModalFunc);
        confirmSell.addEventListener('click', confirmSale);
        closeSellModal.addEventListener('click', closeSellModalFunc);

        // 点击模态框背景关闭
        window.addEventListener('click', function(event) {
          if (event.target === buyModal) {
            closeBuyModalFunc();
          }
          if (event.target === sellModal) {
            closeSellModalFunc();
          }
        });
      });

      // 从API获取用户持仓
      function fetchUserHoldings() {
        fetch('http://localhost:3000/wealth')
          .then(response => response.json())
          .then(data => {
            // 重置持仓数据
            userHoldings = {};
            
            // 将API响应转换为持仓对象 {symbol: quantity}
            data.message.forEach(holding => {
              userHoldings[holding.code] = holding.share;
            });
            
            // 更新UI中的持仓显示
            updateHoldingsDisplay();
            
            // 计算总资产
            calculateGrossAssets();
            
            // 如果当前有选中的资产，更新其持仓信息
            if (selectedItem) {
              updateHoldingInfo();
            }
          })
          .catch(error => {
            console.error('Error fetching holdings:', error);
            showNotification('Failed to load holdings data', 'error');
          });
      }

      // 更新资产列表中的持仓显示
      function updateHoldingsDisplay() {
        document.querySelectorAll('.item').forEach(itemEl => {
          const symbol = itemEl.dataset.symbol;
          const holding = userHoldings[symbol] || 0;
          const holdingEl = itemEl.querySelector('.item-holding');
          if (holdingEl) {
            holdingEl.textContent = `Holding: ${holding}`;
          }
        });
      }

      // 初始化左侧资产列表
      function initializeItemsList() {
        itemsList.innerHTML = '';
        
        // 创建并插入 Gross Assets 项
        const grossAssetsLi = document.createElement('li');
        grossAssetsLi.className = 'gross-assets';
        grossAssetsLi.id = 'grossAssetsItem';
        // 初始计算总资产
        calculateGrossAssets();
        grossAssetsLi.innerHTML = `
          <div>Gross Assets</div>
          <div class="gross-assets-value" id="grossAssetsValue">$${grossAssetsValue.toFixed(2)}</div>
        `;
        itemsList.appendChild(grossAssetsLi);
        
        // 插入分隔线
        const separator = document.createElement('div');
        separator.style.height = '1px';
        separator.style.backgroundColor = '#eee';
        separator.style.margin = '15px 0';
        itemsList.appendChild(separator);

        // 创建并插入所有资产项
        allItems.forEach(item => {
          const li = document.createElement('li');
          li.className = 'item';
          if (selectedItem && selectedItem.symbol === item.symbol) {
            li.classList.add('active');
          }
          li.dataset.symbol = item.symbol;
          let logoUrl = '';
          switch(item.symbol) {
            case 'AAPL':
              logoUrl = 'https://logo.clearbit.com/apple.com';
              break;
            case 'ADDYY':
              logoUrl = 'https://logo.clearbit.com/adidas.com';
              break;
            case 'AMZN':
              logoUrl = 'https://logo.clearbit.com/amazon.com';
              break;
            case 'GOOGL':
              logoUrl = 'https://logo.clearbit.com/google.com';
              break;
            case 'META':
              logoUrl = 'https://logo.clearbit.com/meta.com';
              break;
            case 'MSFT':
              logoUrl = 'https://logo.clearbit.com/microsoft.com';
              break;
            case 'NKE':
              logoUrl = 'https://logo.clearbit.com/nike.com';
              break;
            case 'NVDA':
              logoUrl = 'https://logo.clearbit.com/nvidia.com';
              break;
            case 'TSLA':
              logoUrl = 'https://logo.clearbit.com/tesla.com';
              break;
            case 'WMT':
              logoUrl = 'https://logo.clearbit.com/walmart.com';
              break;
            default:
              logoUrl = 'https://logo.clearbit.com/' + item.name.toLowerCase().replace(/\s+/g, '') + '.com';
          }
          li.innerHTML = `
            <div class="item-content">
              <div class="item-logo">
                <img src="${logoUrl}" 
                     alt="${item.symbol} logo" 
                     style="width: 15%; height: 15%; border-radius: 20%; object-fit: contain;"
                     onerror="this.parentElement.innerHTML='${item.symbol.charAt(0)}'">
              </div>
              <div class="item-info">
                <div class="item-symbol">${item.symbol}</div>
                <div class="item-name">${item.name}</div>
                <div class="item-holding">Holding: 0</div>
              </div>
            </div>
          `;
          li.addEventListener('click', () => selectItem(item));
          itemsList.appendChild(li);
        });
      }

      // 计算总资产价值
      function calculateGrossAssets() {
        grossAssetsValue = 0;
        for (const symbol in userHoldings) {
          if (userHoldings.hasOwnProperty(symbol)) {
            const quantity = userHoldings[symbol];
            if (quantity > 0) {
              // 获取最新价格
              fetch(`http://localhost:3000/stock/${symbol}/current_price`)
                .then(response => response.json())
                .then(priceData => {
                  if (priceData && priceData.current_price) {
                    grossAssetsValue += quantity * priceData.current_price;
                    // 更新 Gross Assets 显示
                    updateGrossAssetsDisplay();
                  }
                })
                .catch(error => {
                  console.error(`Error fetching current price for ${symbol}:`, error);
                });
            }
          }
        }
        // 更新 Gross Assets 显示
        updateGrossAssetsDisplay();
      }

      // 更新 Gross Assets 显示
      function updateGrossAssetsDisplay() {
        const grossAssetsElement = document.getElementById('grossAssetsValue');
        if (grossAssetsElement) {
          grossAssetsElement.textContent = `$${grossAssetsValue.toFixed(2)}`;
        }
      }

      // 选择资产
      function selectItem(item) {
        selectedItem = item;
        
        // 更新UI显示
        updateSelectedItemDisplay();
        
        // 高亮选中的资产项
        document.querySelectorAll('.item').forEach(el => {
          el.classList.remove('active');
          if (el.dataset.symbol === item.symbol) {
            el.classList.add('active');
          }
        });
        
        // 更新持仓信息
        updateHoldingInfo();
        
        // 获取历史数据并渲染图表
        fetchHistoricalData(item.symbol);
      }

      // 更新选中资产显示
      function updateSelectedItemDisplay() {
        if (selectedItem) {
          selectedItemTitle.textContent = `${selectedItem.symbol} - ${selectedItem.name}`;
          if (selectedItem.price) {
            selectedItemSubtitle.textContent = `Current Price: $${selectedItem.price.toFixed(2)}`;
          } else {
            selectedItemSubtitle.textContent = 'Loading price data...';
          }
        }
      }

      // 更新持仓信息显示
      function updateHoldingInfo() {
        if (selectedItem) {
          const holding = userHoldings[selectedItem.symbol] || 0;
          holdingInfo.textContent = `Holding: ${holding}`;
        }
      }

      // 从API获取历史数据
      function fetchHistoricalData(symbol) {
        // 显示加载状态
        chartPlaceholder.innerHTML = `
          <div class="chart-placeholder-icon">⏳</div>
          <div>Loading data for ${symbol}...</div>
        `;
        chartPlaceholder.style.display = 'flex';
        
        // 发起API请求
        fetch(`http://localhost:3000/stock/${symbol}`)
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            if (data.length === 0) {
              throw new Error('No data available');
            }
            
            // 更新当前价格（使用最新数据点）
            if (data.length > 0) {
              const latestData = data[0];
              const price = parseFloat(latestData.vw);
              selectedItem.price = price;
              updateSelectedItemDisplay();
            }
            
            // 渲染图表
            renderChart(data);
          })
          .catch(error => {
            console.error('Error fetching data:', error);
            showNotification('Failed to load data. Please try again later.', 'error');
            chartPlaceholder.innerHTML = `
              <div class="chart-placeholder-icon">❌</div>
              <div>Failed to load data</div>
              <div style="font-size: 14px; margin-top: 10px;">${error.message}</div>
            `;
          });
      }

      // 使用API数据渲染图表
      function renderChart(data) {
        if (!data || data.length === 0) {
          chartPlaceholder.innerHTML = `
            <div class="chart-placeholder-icon">📊</div>
            <div>No data available for ${selectedItem.symbol}</div>
          `;
          return;
        }
        
        // 隐藏占位符
        chartPlaceholder.style.display = 'none';
        
        // 准备数据
        const dates = [];
        const prices = [];
        
        // 按时间排序（从旧到新）
        const sortedData = [...data].sort((a, b) => 
          new Date(a.t) - new Date(b.t)
        );
        
        sortedData.forEach(item => {
          // 格式化日期: "Jul 25"
          const date = new Date(item.t);
          const formattedDate = date.toLocaleDateString('en-US', { 
            month: 'short', 
            day: 'numeric' 
          });
          dates.push(formattedDate);
          prices.push(parseFloat(item.vw)); // 使用vw字段作为价格
        });
        
        // 计算价格变化
        const firstPrice = prices[0];
        const lastPrice = prices[prices.length - 1];
        const changePercent = ((lastPrice - firstPrice) / firstPrice * 100).toFixed(2);
        
        // 销毁现有图表
        if (assetChart) {
          assetChart.destroy();
        }
        
        // 创建新图表
        const ctx = assetChartCanvas.getContext('2d');
        assetChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: dates,
            datasets: [{
              label: `${selectedItem.symbol} Price`,
              data: prices,
              borderColor: '#667eea',
              backgroundColor: 'rgba(102, 126, 234, 0.1)',
              borderWidth: 2,
              pointRadius: 3,
              pointBackgroundColor: '#667eea',
              pointBorderColor: '#fff',
              pointHoverRadius: 5,
              fill: true,
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                mode: 'index',
                intersect: false,
                backgroundColor: 'rgba(0, 0, 0, 0.7)',
                titleFont: {
                  size: 14
                },
                bodyFont: {
                  size: 13
                },
                padding: 10,
                callbacks: {
                  label: function(context) {
                    return `${selectedItem.symbol}: $${context.parsed.y.toFixed(2)}`;
                  }
                }
              }
            },
            scales: {
              x: {
                grid: {
                  display: false
                },
                ticks: {
                  maxRotation: 0,
                  autoSkip: true,
                  maxTicksLimit: 8
                }
              },
              y: {
                grid: {
                  color: 'rgba(0, 0, 0, 0.05)'
                },
                ticks: {
                  callback: function(value) {
                    return '$' + value;
                  }
                }
              }
            },
            interaction: {
              mode: 'nearest',
              axis: 'x',
              intersect: false
            },
            animation: {
              duration: 1000
            }
          }
        });
      }

      // 显示通知
      function showNotification(message, type = 'success') {
        // 移除现有的通知
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
          existingNotification.remove();
        }
        
        // 创建通知元素
        const notification = document.createElement('div');
        notification.className = 'notification';
        if (type === 'error') {
          notification.classList.add('error');
        }
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // 3秒后自动移除
        setTimeout(() => {
          notification.style.animation = 'slideIn 0.3s ease reverse';
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification);
            }
          }, 300);
        }, 3000);
      }

      // ========== 购买功能 ==========
      function openBuyModal() {
        if (selectedItem) {
          buyModalItemSymbol.textContent = selectedItem.symbol;
          buyQuantityInput.value = 1; // 重置数量为1
          buyModal.style.display = 'flex';
          buyQuantityInput.focus();
        }
      }

      function closeBuyModalFunc() {
        buyModal.style.display = 'none';
      }

      function confirmPurchase() {
        if (!selectedItem) return;

        const quantity = parseInt(buyQuantityInput.value);
        if (isNaN(quantity) || quantity <= 0) {
          showNotification('Please enter a valid quantity.', 'error');
          return;
        }

        // 构造请求体
        const requestBody = {
          share: quantity,
          code: selectedItem.symbol,
          type: 0 // 0表示购买
        };

        // 显示加载状态
        showNotification(`Processing purchase of ${quantity} ${selectedItem.symbol}...`);

        // 发送POST请求到后端
        fetch('http://localhost:3000/transaction', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestBody)
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to process purchase');
          }
          return response.json();
        })
        .then(data => {
          if (data.message === 'success') {
            // 显示成功消息
            showNotification(`Successfully purchased ${quantity} ${selectedItem.symbol}!`);
            
            // 重新获取持仓数据（刷新界面）
            fetchUserHoldings();
            
            // 关闭模态框
            closeBuyModalFunc();
          } else {
            showNotification(`Purchase failed: ${data.message}`, 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showNotification(`Purchase failed: ${error.message}`, 'error');
        });
      }

      // ========== 卖出功能 ==========
      function openSellModal() {
        if (selectedItem) {
          const holding = userHoldings[selectedItem.symbol] || 0;
          if (holding > 0) {
            sellModalItemSymbol.textContent = selectedItem.symbol;
            availableQuantity.textContent = holding;
            sellQuantityInput.value = 1;
            sellQuantityInput.max = holding; // 设置最大可售出量
            sellModal.style.display = 'flex';
            sellQuantityInput.focus();
          }
        }
      }

      function closeSellModalFunc() {
        sellModal.style.display = 'none';
      }

      function confirmSale() {
        if (!selectedItem) return;

        const quantity = parseInt(sellQuantityInput.value);
        const holding = userHoldings[selectedItem.symbol] || 0;

        if (isNaN(quantity) || quantity <= 0) {
          showNotification('Please enter a valid quantity.', 'error');
          return;
        }

        if (quantity > holding) {
          showNotification(`You cannot sell more than your current holding (${holding} ${selectedItem.symbol}).`, 'error');
          return;
        }

        // 构造请求体
        const requestBody = {
          share: quantity,
          code: selectedItem.symbol,
          type: 1 // 1表示卖出
        };

        // 显示加载状态
        showNotification(`Processing sale of ${quantity} ${selectedItem.symbol}...`);

        // 发送POST请求到后端
        fetch('http://localhost:3000/transaction', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestBody)
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to process sale');
          }
          return response.json();
        })
        .then(data => {
          if (data.message === 'success') {
            // 显示成功消息
            showNotification(`Successfully sold ${quantity} ${selectedItem.symbol}!`);
            
            // 重新获取持仓数据（刷新界面）
            fetchUserHoldings();
            
            // 关闭模态框
            closeSellModalFunc();
          } else {
            showNotification(`Sale failed: ${data.message}`, 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showNotification(`Sale failed: ${error.message}`, 'error');
        });
      }